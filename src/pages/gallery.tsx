import type { PostgrestSingleResponse } from "@supabase/supabase-js";
import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { Navbar } from "~/components/Navbar";
import { supabase } from "~/utils/supabase";
import { api } from "~/utils/api";
import { useUser } from "@auth0/nextjs-auth0/client";

const Home: NextPage = () => {
  const toasts = useRef<(HTMLDivElement | null)[]>([]);
  const mutation = api.images.updateLikes.useMutation();
  const { user } = useUser()
  const [images, setImages] = useState([] as { generator: string; url: string; user_id: string; likes: number, likers: [] }[]);
  const [heart, setHeart] = useState("‚ù§Ô∏è")
  useEffect(() => {
    async function getAllImages() {
      const {data: images}: PostgrestSingleResponse<{ generator: string, url: string, user_id: string, likes: number, likers: [] }[]> = await supabase.from("Images").select()
      if (images) {
        const imageArr: { generator: string; url: string; user_id: string; likes: number, likers: [] }[] = []
        images.forEach(element => {
          imageArr.push(element)
        });
        setImages(imageArr)
      }
    }
    void getAllImages()
  }, [mutation])
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <Navbar     />
        <div className="container grid grid-cols-4 mt-24 gap-4">
          {images && images.map((img, i) =>
            <div onDoubleClick={() => {
              if(user && user.nickname) {
                if ((img.likers as string[]).includes(user.nickname)) {
                  setHeart("üíî")
                } else {
                  setHeart("‚ù§Ô∏è")
                }
                mutation.mutate(
                  {
                    generator: img.generator,
                    likers: img.likers,
                    user: user.nickname,
                    likes: img.likes
                  }
                )
                const toast = toasts.current[i]
                if(toast) {
                  toast.classList.add('opacity-100')
                  toast.classList.remove('opacity-0')
                  setTimeout(() => {
                      if(toast) {
                        toast.classList.remove('opacity-100')
                        toast.classList.add('opacity-0')
                      }
                  }, 1250);
                }
              }
            }} className="relative" key={i}>
              <img className="peer hover:opacity-50" src={img.url} />
              <p className="peer-hover:opacity-100 opacity-0 absolute text-white bottom-0 p-4">{img.user_id}</p>
              <p className="peer-hover:opacity-100 opacity-0 absolute text-white bottom-0 right-0 p-4">{img.likes} ‚ù§Ô∏è</p>
              <div ref={(el) => { toasts.current[i] = el; }}
                className="p-2 bg-transparent absolute top-1/2 left-1/2 opacity-0 transition-opacity duration-1000 ease-in text-2xl">
                {heart}
              </div>
            </div>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;